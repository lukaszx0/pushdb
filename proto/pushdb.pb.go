// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pushdb.proto

/*
Package pushdb is a generated protocol buffer package.

It is generated from these files:
	pushdb.proto

It has these top-level messages:
	Key
	RegisterWatchRequest
	WatchUpdateResponse
*/
package pushdb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Key struct {
	//  enum ValueType {
	//    DOUBLE = 0;
	//    FLOAT = 1;
	//    INT64 = 2;
	//    BOOL = 3;
	//    STRING = 4;
	//  }
	//
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Key) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Key) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type RegisterWatchRequest struct {
	KeyName string `protobuf:"bytes,1,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
}

func (m *RegisterWatchRequest) Reset()                    { *m = RegisterWatchRequest{} }
func (m *RegisterWatchRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterWatchRequest) ProtoMessage()               {}
func (*RegisterWatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterWatchRequest) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

type WatchUpdateResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *WatchUpdateResponse) Reset()                    { *m = WatchUpdateResponse{} }
func (m *WatchUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchUpdateResponse) ProtoMessage()               {}
func (*WatchUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WatchUpdateResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*Key)(nil), "pushdb.Key")
	proto.RegisterType((*RegisterWatchRequest)(nil), "pushdb.RegisterWatchRequest")
	proto.RegisterType((*WatchUpdateResponse)(nil), "pushdb.WatchUpdateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PushdbService service

type PushdbServiceClient interface {
	Watch(ctx context.Context, in *RegisterWatchRequest, opts ...grpc.CallOption) (PushdbService_WatchClient, error)
}

type pushdbServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushdbServiceClient(cc *grpc.ClientConn) PushdbServiceClient {
	return &pushdbServiceClient{cc}
}

func (c *pushdbServiceClient) Watch(ctx context.Context, in *RegisterWatchRequest, opts ...grpc.CallOption) (PushdbService_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PushdbService_serviceDesc.Streams[0], c.cc, "/pushdb.PushdbService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushdbServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushdbService_WatchClient interface {
	Recv() (*WatchUpdateResponse, error)
	grpc.ClientStream
}

type pushdbServiceWatchClient struct {
	grpc.ClientStream
}

func (x *pushdbServiceWatchClient) Recv() (*WatchUpdateResponse, error) {
	m := new(WatchUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PushdbService service

type PushdbServiceServer interface {
	Watch(*RegisterWatchRequest, PushdbService_WatchServer) error
}

func RegisterPushdbServiceServer(s *grpc.Server, srv PushdbServiceServer) {
	s.RegisterService(&_PushdbService_serviceDesc, srv)
}

func _PushdbService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushdbServiceServer).Watch(m, &pushdbServiceWatchServer{stream})
}

type PushdbService_WatchServer interface {
	Send(*WatchUpdateResponse) error
	grpc.ServerStream
}

type pushdbServiceWatchServer struct {
	grpc.ServerStream
}

func (x *pushdbServiceWatchServer) Send(m *WatchUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PushdbService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pushdb.PushdbService",
	HandlerType: (*PushdbServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _PushdbService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pushdb.proto",
}

func init() { proto.RegisterFile("pushdb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0x2d, 0xce,
	0x48, 0x49, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x74, 0xb9, 0x98,
	0xbd, 0x53, 0x2b, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x38, 0x83, 0xc0, 0x6c, 0x90, 0x58, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0x13, 0x44, 0x0c, 0xc4, 0x56,
	0x32, 0xe4, 0x12, 0x09, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x49, 0x2d, 0x0a, 0x4f, 0x2c, 0x49, 0xce,
	0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe4, 0xe2, 0xc8, 0x4e, 0xad, 0x8c, 0x47,
	0x32, 0x83, 0x3d, 0x3b, 0xb5, 0xd2, 0x2f, 0x31, 0x37, 0x55, 0x49, 0x93, 0x4b, 0x18, 0xac, 0x34,
	0xb4, 0x20, 0x25, 0xb1, 0x24, 0x35, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x18, 0x61, 0x3a, 0x23,
	0xc2, 0x74, 0xa3, 0x70, 0x2e, 0xde, 0x00, 0xb0, 0xb3, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53,
	0x85, 0xdc, 0xb8, 0x58, 0xc1, 0x7a, 0x85, 0x64, 0xf4, 0xa0, 0xae, 0xc7, 0x66, 0xbb, 0x94, 0x34,
	0x4c, 0x16, 0x8b, 0x45, 0x4a, 0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x4f, 0x1b, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x2b, 0x5e, 0xb1, 0xf7, 0x04, 0x01, 0x00, 0x00,
}
